# This is only for educational purposes to analyse the magic var hostvars for selected host(s).
# Use JSON rules to access respective fields through index in brackets [] if variable or element
# of array or element of map is addressed, or field name with dot separator if map element is 
# addressed (so, map elements can be accessed by both [<keyname>] and "dot.keyname" (.<keyname>) ).

# NOTE: It is recommended to limit the number of active hosts in the inventory. If "var: hostvars" is
# uncommented then only one host should be active in the inventory (errors are reported by Ansible otherwise).

- hosts: cluster
  gather_facts: yes
  become: yes

  tasks:

  - name: Display all variables/facts known for a host
    debug:
#     Note: both two following forms work well and give the same result
#      var: hostvars[inventory_hostname]['ansible_facts']['distribution']
#      var: hostvars[inventory_hostname].ansible_facts.distribution

#     Note: this var produces very verbose output
      var: hostvars[inventory_hostname]

#     Note: hostvars alone does not work unless there's only one host active in the inventory
#      var: hostvars

#   Below, a copupele of other examples of accessing various fields in hostvars

  - name: Host default address - "hostvars[inventory_hostname].ansible_default_ipv4.address"
    debug:
      msg: handled host is {{ inventory_hostname }} with default IPv4 {{hostvars[inventory_hostname].ansible_default_ipv4.address}}

  - name: All IPv4 addresses - hostvars[inventory_hostname].ansible_all_ipv4_addresses
    debug:
      var: hostvars[inventory_hostname].ansible_all_ipv4_addresses

  - name: Second IPv4 address - hostvars[inventory_hostname].ansible_all_ipv4_addresses[1]
    debug:
      var: hostvars[inventory_hostname].ansible_all_ipv4_addresses[1]

  - name: Next level - hostvars[inventory_hostname].ansible_eth0.features.esp_hw_offload
    debug:
      var: hostvars[inventory_hostname].ansible_eth0.features.esp_hw_offload

